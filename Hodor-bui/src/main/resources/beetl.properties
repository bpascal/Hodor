#默认配置:
##- 配置引擎实现类，默认即可.
ENGINE=org.beetl.core.engine.FastRuntimeEngine
##- 指定了占位符号，默认是${ }，也可以指定为其他占位符。
DELIMITER_PLACEHOLDER_START=${
DELIMITER_PLACEHOLDER_END=}
##- 指定了语句的定界符号，默认是<% %>，也可以指定为其他定界符号
DELIMITER_STATEMENT_START=<%
DELIMITER_STATEMENT_END=%>
##- 指定IO输出模式，默认是FALSE,即通常的字符输出，在考虑高性能情况下，可以设置成true。详细请参考高级用法
DIRECT_BYTE_OUTPUT = FALSE
##- 指定了支持HTML标签，且符号为#,默认配置下，模板引擎识别<#tag ></#tag>这样的类似html标签，并能调用相应的标签函数或者模板文件。你也可以指定别的符号，如bg: 则识别<bg:
HTML_TAG_SUPPORT = true
HTML_TAG_FLAG = #
##- 指定如果标签属性有var，则认为是需要绑定变量给模板的标签函数
HTML_TAG_BINDING_ATTRIBUTE = var
##- 指定允许本地Class直接调用
NATIVE_CALL = TRUE
##- 指定模板字符集是UTF-8
TEMPLATE_CHARSET = UTF-8
##- 指定异常的解析类，默认是ConsoleErrorHandler，他将在render发生异常的时候在后台打印出错误信息（System.out)。
ERROR_HANDLER = org.beetl.core.ConsoleErrorHandler
##- 指定了本地Class调用的安全策略
NATIVE_SECUARTY_MANAGER= org.beetl.core.DefaultNativeSecurityManager
##- 配置了是否进行严格MVC，通常情况下，此处设置为false.
MVC_STRICT = FALSE

#资源配置，resource后的属性只限于特定ResourceLoader
##- 指定了默认使用的模板资源加载器，注意，在beetl与其他MVC框架集成的时候，模板加载器不一定根据这个配置，比如spring，他的RESOURCE_LOADER以spring的配置为准
RESOURCE_LOADER=org.beetl.core.resource.ClasspathResourceLoader
#classpath 根路径
##- 配置了模板资源加载器的一些属性，如设置根路径为/,即Classpath的顶级路径，并且总是检测模板是否更改
RESOURCE.root= /
#是否检测文件变化,开发用true合适，但线上要改为false
RESOURCE.autoCheck= true

#自定义脚本方法文件的Root目录和后缀
##- 配置了自定义的方法所在的目录以及文件名后缀。beetl既支持通过java类定义方法，也支持通过模板文件来定义方法
RESOURCE.functionRoot = functions
RESOURCE.functionSuffix = html
#自定义标签文件Root目录和后缀
##- 配置了自定义的html标签所在的目录以及文件名后缀。beetl既支持通过java类定义标签，也支持通过模板文件来定义标签
RESOURCE.tagRoot = htmltag
RESOURCE.tagSuffix = tag

#####  扩展 ##############
# 内置的方法
##- 注册了一个date方法，其实现类是org.beetl.ext.fn.DateFunction
FN.date = org.beetl.ext.fn.DateFunction
#......
#内置的功能包
##- 注册了一个方法包strutil，其实现类org.beetl.ext.fn.StringUtil，此类的每个public方法都将注册为beetl的方法
FNP.strutil = org.beetl.ext.fn.StringUtil
#......
#内置的默认格式化函数
##- 注册了一个日期格式化函数
FTC.java.util.Date = org.beetl.ext.format.DateFormat
#.....
# 标签类
##- 注册了一个include标签函数
TAG.include= org.beetl.ext.tag.IncludeTag